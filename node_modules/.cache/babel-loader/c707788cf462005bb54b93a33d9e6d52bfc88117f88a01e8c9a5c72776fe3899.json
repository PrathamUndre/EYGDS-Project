{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { FaHeart, FaRegHeart, FaPlus, FaTrash, FaEdit } from \"react-icons/fa\";\n// import \"../pages/style/Home.css\";\n\n// const Home = () => {\n//   const [recipes, setRecipes] = useState([]);\n//   const [search, setSearch] = useState(\"\");\n//   const [savedRecipes, setSavedRecipes] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editRecipeId, setEditRecipeId] = useState(null);\n//   const [newRecipe, setNewRecipe] = useState({\n//     name: \"\",\n//     ingredients: \"\",\n//     method: \"\",\n//     image: null,\n//   });\n\n//   // Fetch Recipes from Backend\n//   useEffect(() => {\n//     fetch(\"http://localhost:3001/api/recipes\")\n//       .then((res) => res.json())\n//       .then((data) => setRecipes(data))\n//       .catch((error) => console.error(\"Error fetching recipes:\", error));\n\n//     // Load saved recipes from localStorage\n//     const storedRecipes = JSON.parse(localStorage.getItem(\"savedRecipes\")) || [];\n//     setSavedRecipes(storedRecipes);\n//   }, []);\n\n//   // Handle Image Upload\n//   const handleImageUpload = (e) => {\n//     setNewRecipe((prev) => ({ ...prev, image: e.target.files[0] }));\n//   };\n\n//   // Save or Update Recipe\n//   const handleSaveRecipe = async () => {\n//     if (!newRecipe.name || !newRecipe.ingredients || !newRecipe.method || !newRecipe.image) {\n//       alert(\"Please fill out all fields and upload an image before saving!\");\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append(\"name\", newRecipe.name);\n//     formData.append(\"ingredients\", newRecipe.ingredients.split(\",\")); // Convert to array\n//     formData.append(\"method\", newRecipe.method);\n//     formData.append(\"image\", newRecipe.image);\n\n//     try {\n//       let response;\n//       if (editRecipeId) {\n//         // UPDATE Recipe (PUT request)\n//         response = await fetch(`http://localhost:3001/api/recipes/${editRecipeId}`, {\n//           method: \"PUT\",\n//           body: formData,\n//         });\n//       } else {\n//         // CREATE Recipe (POST request)\n//         response = await fetch(\"http://localhost:3001/api/recipes\", {\n//           method: \"POST\",\n//           body: formData,\n//         });\n//       }\n\n//       if (!response.ok) throw new Error(\"Failed to save recipe\");\n\n//       const data = await response.json();\n\n//       if (editRecipeId) {\n//         setRecipes(recipes.map((r) => (r._id === editRecipeId ? data : r))); // Update state\n//       } else {\n//         setRecipes([...recipes, data]); // Add new recipe to state\n//       }\n\n//       setShowForm(false);\n//       setEditRecipeId(null);\n//       setNewRecipe({ name: \"\", ingredients: \"\", method: \"\", image: null });\n\n//     } catch (error) {\n//       console.error(\"Error saving recipe:\", error);\n//     }\n//   };\n\n//   // Delete Recipe & Remove from Saved\n//   const handleDeleteRecipe = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this recipe?\")) return;\n\n//     try {\n//       await fetch(`http://localhost:3001/api/recipes/${id}`, { method: \"DELETE\" });\n\n//       setRecipes((prevRecipes) => prevRecipes.filter((recipe) => recipe._id !== id));\n\n//       // Remove from savedRecipes as well\n//       const updatedSavedRecipes = savedRecipes.filter((recipeId) => recipeId !== id);\n//       setSavedRecipes(updatedSavedRecipes);\n//       localStorage.setItem(\"savedRecipes\", JSON.stringify(updatedSavedRecipes));\n\n//     } catch (error) {\n//       console.error(\"Error deleting recipe:\", error);\n//     }\n//   };\n\n//   // Edit Recipe (Pre-fill form)\n//   const handleEditRecipe = (recipe) => {\n//     setEditRecipeId(recipe._id);\n//     setNewRecipe({\n//       name: recipe.name,\n//       ingredients: recipe.ingredients.join(\", \"), // Convert array to string\n//       method: recipe.method,\n//       image: null, // Reset image field\n//     });\n//     setShowForm(true);\n//   };\n\n//   // Toggle Save Recipe (Favoriting)\n//   const toggleSaveRecipe = (id) => {\n//     let updatedSavedRecipes;\n//     if (savedRecipes.includes(id)) {\n//       updatedSavedRecipes = savedRecipes.filter((recipeId) => recipeId !== id);\n//     } else {\n//       updatedSavedRecipes = [...savedRecipes, id];\n//     }\n//     setSavedRecipes(updatedSavedRecipes);\n//     localStorage.setItem(\"savedRecipes\", JSON.stringify(updatedSavedRecipes)); // Update localStorage\n//   };\n\n//   // Filter Recipes\n//   const filteredRecipes = recipes.filter(\n//     (recipe) =>\n//       recipe.name.toLowerCase().includes(search.toLowerCase()) ||\n//       recipe.ingredients.some((ingredient) =>\n//         ingredient.toLowerCase().includes(search.toLowerCase())\n//       )\n//   );\n\n//   return (\n//     <div className=\"container\">\n//       <button className=\"add-recipe-btn\" onClick={() => setShowForm(!showForm)}>\n//         <FaPlus /> {showForm ? \"Close\" : \"Add Recipe\"}\n//       </button>\n\n//       <input\n//         type=\"text\"\n//         className=\"form-control my-3\"\n//         placeholder=\"Search recipes by name or ingredient...\"\n//         value={search}\n//         onChange={(e) => setSearch(e.target.value)}\n//       />\n\n//       {showForm && (\n//         <div className=\"card p-3 mb-4\">\n//           <h4>{editRecipeId ? \"Edit Recipe\" : \"Add a New Recipe\"}</h4>\n//           <input\n//             type=\"text\"\n//             className=\"form-control mb-2\"\n//             placeholder=\"Dish Name\"\n//             value={newRecipe.name}\n//             onChange={(e) => setNewRecipe({ ...newRecipe, name: e.target.value })}\n//           />\n//           <input\n//             type=\"text\"\n//             className=\"form-control mb-2\"\n//             placeholder=\"Ingredients (comma separated)\"\n//             value={newRecipe.ingredients}\n//             onChange={(e) => setNewRecipe({ ...newRecipe, ingredients: e.target.value })}\n//           />\n//           <textarea\n//             className=\"form-control mb-2\"\n//             placeholder=\"Method\"\n//             value={newRecipe.method}\n//             onChange={(e) => setNewRecipe({ ...newRecipe, method: e.target.value })}\n//           />\n//           <input type=\"file\" className=\"form-control mb-2\" onChange={handleImageUpload} accept=\"image/*\" />\n//           <button className=\"btn btn-success\" onClick={handleSaveRecipe}>\n//             {editRecipeId ? \"Update\" : \"Add\"} Recipe\n//           </button>\n//         </div>\n//       )}\n\n//       <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\">\n//         {filteredRecipes.length > 0 ? (\n//           filteredRecipes.map((recipe) => (\n//             <div className=\"col\" key={recipe._id}>\n//               <div className=\"card h-100 shadow-sm\">\n//               <img src={`http://localhost:3001/api${recipe.image}`} className=\"card-img-top\" alt={recipe.name} />\n//                 <div className=\"card-body\">\n//                   <h5 className=\"card-title d-flex justify-content-between align-items-center\">\n//                     {recipe.name}\n//                     <span onClick={() => toggleSaveRecipe(recipe._id)} style={{ cursor: \"pointer\", color: \"red\", fontSize: \"1.5rem\" }}>\n//                       {savedRecipes.includes(recipe._id) ? <FaHeart /> : <FaRegHeart />}\n//                     </span>\n//                   </h5>\n//                   <p><strong>Ingredients:</strong> {recipe.ingredients.join(\", \")}</p>\n//                   <p><strong>Method:</strong> {recipe.method}</p>\n//                   <button className=\"btn btn-warning btn-sm me-2\" onClick={() => handleEditRecipe(recipe)}>\n//                     <FaEdit />\n//                   </button>\n//                   <button className=\"btn btn-danger btn-sm\" onClick={() => handleDeleteRecipe(recipe._id)}>\n//                     <FaTrash />\n//                   </button>\n//                 </div>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p className=\"text-center\">No matching recipes found.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Home;","map":{"version":3,"names":[],"sources":["C:/Users/undre/OneDrive/Desktop/EYGDS/frontend/src/pages/Home.jsx"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { FaHeart, FaRegHeart, FaPlus, FaTrash, FaEdit } from \"react-icons/fa\";\r\n// import \"../pages/style/Home.css\";\r\n\r\n// const Home = () => {\r\n//   const [recipes, setRecipes] = useState([]);\r\n//   const [search, setSearch] = useState(\"\");\r\n//   const [savedRecipes, setSavedRecipes] = useState([]);\r\n//   const [showForm, setShowForm] = useState(false);\r\n//   const [editRecipeId, setEditRecipeId] = useState(null);\r\n//   const [newRecipe, setNewRecipe] = useState({\r\n//     name: \"\",\r\n//     ingredients: \"\",\r\n//     method: \"\",\r\n//     image: null,\r\n//   });\r\n\r\n//   // Fetch Recipes from Backend\r\n//   useEffect(() => {\r\n//     fetch(\"http://localhost:3001/api/recipes\")\r\n//       .then((res) => res.json())\r\n//       .then((data) => setRecipes(data))\r\n//       .catch((error) => console.error(\"Error fetching recipes:\", error));\r\n\r\n//     // Load saved recipes from localStorage\r\n//     const storedRecipes = JSON.parse(localStorage.getItem(\"savedRecipes\")) || [];\r\n//     setSavedRecipes(storedRecipes);\r\n//   }, []);\r\n\r\n//   // Handle Image Upload\r\n//   const handleImageUpload = (e) => {\r\n//     setNewRecipe((prev) => ({ ...prev, image: e.target.files[0] }));\r\n//   };\r\n\r\n//   // Save or Update Recipe\r\n//   const handleSaveRecipe = async () => {\r\n//     if (!newRecipe.name || !newRecipe.ingredients || !newRecipe.method || !newRecipe.image) {\r\n//       alert(\"Please fill out all fields and upload an image before saving!\");\r\n//       return;\r\n//     }\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"name\", newRecipe.name);\r\n//     formData.append(\"ingredients\", newRecipe.ingredients.split(\",\")); // Convert to array\r\n//     formData.append(\"method\", newRecipe.method);\r\n//     formData.append(\"image\", newRecipe.image);\r\n\r\n//     try {\r\n//       let response;\r\n//       if (editRecipeId) {\r\n//         // UPDATE Recipe (PUT request)\r\n//         response = await fetch(`http://localhost:3001/api/recipes/${editRecipeId}`, {\r\n//           method: \"PUT\",\r\n//           body: formData,\r\n//         });\r\n//       } else {\r\n//         // CREATE Recipe (POST request)\r\n//         response = await fetch(\"http://localhost:3001/api/recipes\", {\r\n//           method: \"POST\",\r\n//           body: formData,\r\n//         });\r\n//       }\r\n\r\n//       if (!response.ok) throw new Error(\"Failed to save recipe\");\r\n\r\n//       const data = await response.json();\r\n\r\n//       if (editRecipeId) {\r\n//         setRecipes(recipes.map((r) => (r._id === editRecipeId ? data : r))); // Update state\r\n//       } else {\r\n//         setRecipes([...recipes, data]); // Add new recipe to state\r\n//       }\r\n\r\n//       setShowForm(false);\r\n//       setEditRecipeId(null);\r\n//       setNewRecipe({ name: \"\", ingredients: \"\", method: \"\", image: null });\r\n\r\n//     } catch (error) {\r\n//       console.error(\"Error saving recipe:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Delete Recipe & Remove from Saved\r\n//   const handleDeleteRecipe = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this recipe?\")) return;\r\n\r\n//     try {\r\n//       await fetch(`http://localhost:3001/api/recipes/${id}`, { method: \"DELETE\" });\r\n\r\n//       setRecipes((prevRecipes) => prevRecipes.filter((recipe) => recipe._id !== id));\r\n\r\n//       // Remove from savedRecipes as well\r\n//       const updatedSavedRecipes = savedRecipes.filter((recipeId) => recipeId !== id);\r\n//       setSavedRecipes(updatedSavedRecipes);\r\n//       localStorage.setItem(\"savedRecipes\", JSON.stringify(updatedSavedRecipes));\r\n\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting recipe:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Edit Recipe (Pre-fill form)\r\n//   const handleEditRecipe = (recipe) => {\r\n//     setEditRecipeId(recipe._id);\r\n//     setNewRecipe({\r\n//       name: recipe.name,\r\n//       ingredients: recipe.ingredients.join(\", \"), // Convert array to string\r\n//       method: recipe.method,\r\n//       image: null, // Reset image field\r\n//     });\r\n//     setShowForm(true);\r\n//   };\r\n\r\n//   // Toggle Save Recipe (Favoriting)\r\n//   const toggleSaveRecipe = (id) => {\r\n//     let updatedSavedRecipes;\r\n//     if (savedRecipes.includes(id)) {\r\n//       updatedSavedRecipes = savedRecipes.filter((recipeId) => recipeId !== id);\r\n//     } else {\r\n//       updatedSavedRecipes = [...savedRecipes, id];\r\n//     }\r\n//     setSavedRecipes(updatedSavedRecipes);\r\n//     localStorage.setItem(\"savedRecipes\", JSON.stringify(updatedSavedRecipes)); // Update localStorage\r\n//   };\r\n\r\n//   // Filter Recipes\r\n//   const filteredRecipes = recipes.filter(\r\n//     (recipe) =>\r\n//       recipe.name.toLowerCase().includes(search.toLowerCase()) ||\r\n//       recipe.ingredients.some((ingredient) =>\r\n//         ingredient.toLowerCase().includes(search.toLowerCase())\r\n//       )\r\n//   );\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <button className=\"add-recipe-btn\" onClick={() => setShowForm(!showForm)}>\r\n//         <FaPlus /> {showForm ? \"Close\" : \"Add Recipe\"}\r\n//       </button>\r\n\r\n//       <input\r\n//         type=\"text\"\r\n//         className=\"form-control my-3\"\r\n//         placeholder=\"Search recipes by name or ingredient...\"\r\n//         value={search}\r\n//         onChange={(e) => setSearch(e.target.value)}\r\n//       />\r\n\r\n//       {showForm && (\r\n//         <div className=\"card p-3 mb-4\">\r\n//           <h4>{editRecipeId ? \"Edit Recipe\" : \"Add a New Recipe\"}</h4>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control mb-2\"\r\n//             placeholder=\"Dish Name\"\r\n//             value={newRecipe.name}\r\n//             onChange={(e) => setNewRecipe({ ...newRecipe, name: e.target.value })}\r\n//           />\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control mb-2\"\r\n//             placeholder=\"Ingredients (comma separated)\"\r\n//             value={newRecipe.ingredients}\r\n//             onChange={(e) => setNewRecipe({ ...newRecipe, ingredients: e.target.value })}\r\n//           />\r\n//           <textarea\r\n//             className=\"form-control mb-2\"\r\n//             placeholder=\"Method\"\r\n//             value={newRecipe.method}\r\n//             onChange={(e) => setNewRecipe({ ...newRecipe, method: e.target.value })}\r\n//           />\r\n//           <input type=\"file\" className=\"form-control mb-2\" onChange={handleImageUpload} accept=\"image/*\" />\r\n//           <button className=\"btn btn-success\" onClick={handleSaveRecipe}>\r\n//             {editRecipeId ? \"Update\" : \"Add\"} Recipe\r\n//           </button>\r\n//         </div>\r\n//       )}\r\n\r\n//       <div className=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\">\r\n//         {filteredRecipes.length > 0 ? (\r\n//           filteredRecipes.map((recipe) => (\r\n//             <div className=\"col\" key={recipe._id}>\r\n//               <div className=\"card h-100 shadow-sm\">\r\n//               <img src={`http://localhost:3001/api${recipe.image}`} className=\"card-img-top\" alt={recipe.name} />\r\n//                 <div className=\"card-body\">\r\n//                   <h5 className=\"card-title d-flex justify-content-between align-items-center\">\r\n//                     {recipe.name}\r\n//                     <span onClick={() => toggleSaveRecipe(recipe._id)} style={{ cursor: \"pointer\", color: \"red\", fontSize: \"1.5rem\" }}>\r\n//                       {savedRecipes.includes(recipe._id) ? <FaHeart /> : <FaRegHeart />}\r\n//                     </span>\r\n//                   </h5>\r\n//                   <p><strong>Ingredients:</strong> {recipe.ingredients.join(\", \")}</p>\r\n//                   <p><strong>Method:</strong> {recipe.method}</p>\r\n//                   <button className=\"btn btn-warning btn-sm me-2\" onClick={() => handleEditRecipe(recipe)}>\r\n//                     <FaEdit />\r\n//                   </button>\r\n//                   <button className=\"btn btn-danger btn-sm\" onClick={() => handleDeleteRecipe(recipe._id)}>\r\n//                     <FaTrash />\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           ))\r\n//         ) : (\r\n//           <p className=\"text-center\">No matching recipes found.</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}